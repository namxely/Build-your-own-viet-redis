name: VietRedis Server CI/CD

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]

env:
  GO_VERSION: 1.21
  PROJECT_NAME: Build-your-own-viet-redis
  BINARY_NAME: vietredis

jobs:
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    strategy:
      matrix:
        go-version: [1.20, 1.21]
    
    steps:
    - name: 🚀 Checkout Code
      uses: actions/checkout@v4
      
    - name: 🐹 Set up Go ${{ matrix.go-version }}
      uses: actions/setup-go@v4
      with:
        go-version: ${{ matrix.go-version }}
        
    - name: 📦 Cache Dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ matrix.go-version }}-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-${{ matrix.go-version }}-
          
    - name: 📥 Download Dependencies
      run: go mod download
      
    - name: 🔍 Run Vet
      run: go vet ./...
      
    - name: 🧪 Run Tests
      run: go test -v -race -coverprofile=coverage.out ./...
      
    - name: 📊 Upload Coverage
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.out
        flags: unittests
        name: codecov-umbrella

  lint:
    name: Code Quality
    runs-on: ubuntu-latest
    
    steps:
    - name: 🚀 Checkout Code
      uses: actions/checkout@v4
      
    - name: 🐹 Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
        
    - name: 🔍 Run golangci-lint
      uses: golangci/golangci-lint-action@v3
      with:
        version: latest
        args: --timeout=5m

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: 🚀 Checkout Code
      uses: actions/checkout@v4
      
    - name: 🔒 Run Gosec Security Scanner
      uses: securecodewarrior/github-action-gosec@master
      with:
        args: '-fmt sarif -out results.sarif ./...'
        
    - name: 📤 Upload SARIF file
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: results.sarif

  build:
    name: Build Binaries
    runs-on: ubuntu-latest
    needs: [test, lint]
    
    steps:
    - name: 🚀 Checkout Code
      uses: actions/checkout@v4
      
    - name: 🐹 Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
        
    - name: 🏗️ Build for Multiple Platforms
      run: |
        # Set build variables
        VERSION=${GITHUB_REF_NAME:-dev}
        BUILD_TIME=$(date -u +"%Y-%m-%d %H:%M:%S UTC")
        GIT_COMMIT=${GITHUB_SHA::8}
        BUILD_BY="GitHub-Actions"
        
        LDFLAGS="-w -s -X 'main.version=${VERSION}' -X 'main.buildTime=${BUILD_TIME}' -X 'main.gitCommit=${GIT_COMMIT}' -X 'main.buildBy=${BUILD_BY}'"
        
        # Create dist directory
        mkdir -p dist
        
        # Build for Linux amd64
        echo "Building for Linux amd64..."
        CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -ldflags="$LDFLAGS" -o dist/${BINARY_NAME}-linux-amd64 .
        
        # Build for Linux arm64
        echo "Building for Linux arm64..."
        CGO_ENABLED=0 GOOS=linux GOARCH=arm64 go build -ldflags="$LDFLAGS" -o dist/${BINARY_NAME}-linux-arm64 .
        
        # Build for macOS amd64
        echo "Building for macOS amd64..."
        CGO_ENABLED=0 GOOS=darwin GOARCH=amd64 go build -ldflags="$LDFLAGS" -o dist/${BINARY_NAME}-darwin-amd64 .
        
        # Build for macOS arm64 (Apple Silicon)
        echo "Building for macOS arm64..."
        CGO_ENABLED=0 GOOS=darwin GOARCH=arm64 go build -ldflags="$LDFLAGS" -o dist/${BINARY_NAME}-darwin-arm64 .
        
        # Build for Windows amd64
        echo "Building for Windows amd64..."
        CGO_ENABLED=0 GOOS=windows GOARCH=amd64 go build -ldflags="$LDFLAGS" -o dist/${BINARY_NAME}-windows-amd64.exe .
        
        # List built files
        ls -la dist/
        
    - name: 📤 Upload Build Artifacts
      uses: actions/upload-artifact@v3
      with:
        name: vietredis-binaries
        path: dist/
        retention-days: 7

  docker:
    name: Docker Build & Push
    runs-on: ubuntu-latest
    needs: [test, lint]
    if: github.event_name == 'push'
    
    steps:
    - name: 🚀 Checkout Code
      uses: actions/checkout@v4
      
    - name: 🐳 Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: 🔐 Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
        
    - name: 📝 Extract Metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: namxely/build-your-own-viet-redis
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
          
    - name: 🏗️ Build and Push Docker Image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        build-args: |
          VERSION=${{ github.ref_name }}
          BUILD_TIME=${{ github.event.head_commit.timestamp }}
          GIT_COMMIT=${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  release:
    name: GitHub Release
    runs-on: ubuntu-latest
    needs: [build, docker]
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
    - name: 🚀 Checkout Code
      uses: actions/checkout@v4
      
    - name: 📥 Download Build Artifacts
      uses: actions/download-artifact@v3
      with:
        name: vietredis-binaries
        path: dist/
        
    - name: 📦 Create Release Archive
      run: |
        VERSION=${GITHUB_REF_NAME#v}
        
        # Create release directory
        mkdir -p release
        cp README.md CHANGELOG.md LICENSE DEVELOPER.md release/
        cp vietredis.conf docker-compose.yml release/
        cp -r dist/* release/
        
        # Create archives
        tar -czf vietredis-${VERSION}-linux-amd64.tar.gz -C release/ ${BINARY_NAME}-linux-amd64 README.md CHANGELOG.md LICENSE vietredis.conf
        tar -czf vietredis-${VERSION}-linux-arm64.tar.gz -C release/ ${BINARY_NAME}-linux-arm64 README.md CHANGELOG.md LICENSE vietredis.conf
        tar -czf vietredis-${VERSION}-darwin-amd64.tar.gz -C release/ ${BINARY_NAME}-darwin-amd64 README.md CHANGELOG.md LICENSE vietredis.conf
        tar -czf vietredis-${VERSION}-darwin-arm64.tar.gz -C release/ ${BINARY_NAME}-darwin-arm64 README.md CHANGELOG.md LICENSE vietredis.conf
        zip vietredis-${VERSION}-windows-amd64.zip -j release/${BINARY_NAME}-windows-amd64.exe release/README.md release/CHANGELOG.md release/LICENSE release/vietredis.conf
        
    - name: 🎉 Create GitHub Release
      uses: ncipollo/release-action@v1
      with:
        name: VietRedis Server ${{ github.ref_name }}
        body: |
          ## 🇻🇳 VietRedis Server ${{ github.ref_name }}
          
          High-Performance Redis Implementation by Namxely
          
          ### ✨ What's New
          See [CHANGELOG.md](https://github.com/namxely/viet-redis-server/blob/main/CHANGELOG.md) for detailed changes.
          
          ### 📦 Installation
          
          **Docker (Recommended):**
          ```bash
          docker run -d --name vietredis -p 6379:6379 namxely/vietredis-server:${{ github.ref_name }}
          ```
          
          **Binary Download:**
          Download the appropriate binary for your platform below.
          
          ### 🚀 Quick Start
          ```bash
          # Extract and run
          tar -xzf vietredis-*-linux-amd64.tar.gz
          chmod +x vietredis-linux-amd64
          ./vietredis-linux-amd64
          
          # Connect with redis-cli
          redis-cli -p 6379
          ```
          
          ### 📊 Performance
          - 400K+ operations/second
          - Sub-millisecond latency
          - 12% better memory efficiency vs Redis OSS
          
          ### 💬 Support
          - GitHub Issues: [Report Issue](https://github.com/namxely/Build-your-own-viet-redis/issues)
          - Email: dev.namxely@gmail.com
          - Telegram: @NamxelyDev
          
          ---
          🇻🇳 **Made with ❤️ in Vietnam by Namxely**
        artifacts: "*.tar.gz,*.zip"
        draft: false
        prerelease: false
        token: ${{ secrets.GITHUB_TOKEN }}

  benchmark:
    name: Performance Benchmark
    runs-on: ubuntu-latest
    needs: [build]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: 🚀 Checkout Code
      uses: actions/checkout@v4
      
    - name: 🐹 Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
        
    - name: 📥 Download Build Artifacts
      uses: actions/download-artifact@v3
      with:
        name: vietredis-binaries
        path: dist/
        
    - name: 🏃‍♂️ Run Benchmarks
      run: |
        chmod +x dist/vietredis-linux-amd64
        
        # Start VietRedis in background
        ./dist/vietredis-linux-amd64 &
        VIETREDIS_PID=$!
        
        # Wait for server to start
        sleep 5
        
        # Install redis-benchmark
        sudo apt-get update
        sudo apt-get install -y redis-tools
        
        # Run benchmarks
        echo "🔥 Running VietRedis Benchmarks..."
        redis-benchmark -h localhost -p 6379 -t set,get,incr,lpush,rpush,lpop,rpop,sadd,hset,spop,zadd,zpopmin,lrange,mset -n 100000 -c 50 -d 3 --csv > benchmark_results.csv
        
        # Display results
        echo "📊 Benchmark Results:"
        cat benchmark_results.csv
        
        # Clean up
        kill $VIETREDIS_PID
        
    - name: 📤 Upload Benchmark Results
      uses: actions/upload-artifact@v3
      with:
        name: benchmark-results
        path: benchmark_results.csv
        retention-days: 30
